{"version":3,"sources":["components/About.js","components/ListCars.js","components/Home.js","components/Navbar.js","components/Car.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["About","react_default","a","createElement","className","ListCars","cars","this","props","carList","map","car","key","id","Link","to","brand","model","price","Component","connect","state","Home","components_ListCars","withRouter","Car","ownProps","match","params","car_id","find","App","BrowserRouter","components_Navbar","Switch","Route","exact","path","component","Boolean","window","location","hostname","initState","rootReducer","arguments","length","undefined","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6eb843c4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <h1 className=\"center\">About us</h1>\r\n        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Recusandae repudiandae repellat illo magni eligendi cupiditate voluptates eius nam voluptate. Incidunt nihil ullam quae quia officia quaerat, deserunt eligendi explicabo totam?</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass ListCars extends Component {\r\n  render() {\r\n    const { cars } = this.props;\r\n\r\n    const carList = this.props.cars ? (\r\n      cars.map(car => {\r\n        return (\r\n          <div className=\"card\" key={car.id}>\r\n            <Link to={'/' + car.id}>\r\n              <div className=\"card-content car center black-text\">\r\n                <h4>Brand: {car.brand}</h4>\r\n                <h5>Model: {car.model}</h5>\r\n                <h5>Price: {car.price}</h5>\r\n                <h6>Click for more info</h6>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n        )\r\n      })\r\n    ) : (\r\n        <div className=\"center\">No cars available at the moment.</div>\r\n      )\r\n\r\n    return (\r\n      <div className='car-list container'>\r\n        {carList}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cars: state.cars\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ListCars);","import React from 'react';\r\nimport ListCars from './ListCars';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <h1 className=\"center\">Welcome to CopenCars</h1>\r\n\r\n        <ListCars />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className=\"nav-wrapper blue lighten-3\">\r\n      <Link to=\"/\" className=\"brand-logo\">CopenCars</Link>\r\n\r\n      <ul className=\"right\">\r\n        <li><Link to=\"/\">Home</Link></li>\r\n        <li><Link to=\"/about\">About</Link></li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default withRouter(Navbar);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Car extends Component {\r\n  render() {\r\n\r\n    const car = this.props.car ? (\r\n      <div className=\"card\">\r\n        <div className=\"card-content center\">\r\n          <h4>Brand: {this.props.car.brand}</h4>\r\n          <h5>Model: {this.props.car.model}</h5>\r\n          <h5>Price: {this.props.car.price}</h5>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n        <div>Loading car...</div>\r\n      )\r\n    return (\r\n      <div className=\"container\">\r\n        { car }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let id = ownProps.match.params.car_id;\r\n  return {\r\n    car: state.cars.find(car => car.id === id)\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Car);","import React, { Component } from 'react';\nimport About from './components/About';\nimport Home from './components/Home';\nimport Navbar from './components/Navbar';\nimport Car from './components/Car';\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n        <Navbar />\n        \n        <Switch>\n          <Route exact path='/' component={ Home } />\n          <Route path='/about' component={ About } />\n          <Route path='/:car_id' component= { Car } />\n        </Switch>\n\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n  cars: [\r\n    {id: '1', brand: 'VW', model: 'Golf 7', price: 'EUR 25.000'},\r\n    {id: '2', brand: 'Skoda', model: 'Octavia', price: 'EUR 22.000'},\r\n    {id: '3', brand: 'Mercedez', model: 'Benz', price: 'EUR 55.000'},\r\n    {id: '4', brand: 'Dacia', model: 'Sandero', price: 'EUR 9.999'},\r\n    {id: '5', brand: 'Audi', model: 'A6', price: 'EUR 59.999'}\r\n  ]\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n  return state;\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}