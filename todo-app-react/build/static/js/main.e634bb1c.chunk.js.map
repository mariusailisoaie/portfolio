{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","todoList","length","map","todo","react_default","a","createElement","onClick","id","className","key","content","AddTodo","state","updateTodo","e","_this","setState","target","value","handleSubmit","preventDefault","props","addTodo","document","getElementById","onSubmit","this","htmlFor","onChange","type","Component","App","console","log","Object","toConsumableArray","concat","filter","src_Todos","src_AddTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAoBeA,EAlBD,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,WACfC,EAAWF,EAAMG,OACrBH,EAAMI,IAAI,SAAAC,GACR,OACEC,EAAAC,EAAAC,cAAA,OAAKC,QAAS,WAAOR,EAAWI,EAAKK,KAAMC,UAAU,8BAA8BC,IAAMP,EAAKK,IAC5FJ,EAAAC,EAAAC,cAAA,SAAKH,EAAKQ,QAASP,EAAAC,EAAAC,cAAA,KAAGG,UAAU,uCAIpCL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,UAAb,uBAEJ,OACEL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,wBACXT,ICqBOY,6MAjCbC,MAAQ,CACNF,QAAS,QAGXG,WAAa,SAACC,GACZC,EAAKC,SAAS,CACZN,QAASI,EAAEG,OAAOC,WAItBC,aAAe,SAACL,GACdA,EAAEM,iBACFL,EAAKM,MAAMC,QAAQP,EAAKH,OAExBG,EAAKC,SAAS,CACZN,QAAS,OAGXa,SAASC,eAAe,QAAQN,MAAQ,4EAIxC,OACEf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACbL,EAAAC,EAAAC,cAAA,QAAMoB,SAAWC,KAAKP,cACpBhB,EAAAC,EAAAC,cAAA,SAAOsB,QAAQ,QAAf,YACAxB,EAAAC,EAAAC,cAAA,SAAOuB,SAAWF,KAAKb,WAAagB,KAAK,OAAOtB,GAAG,kBA3BvCuB,aC2CPC,6MAxCbnB,MAAQ,CACNf,MAAO,CACL,CAAEa,QAAS,eAAgBH,GAAI,GAC/B,CAAEG,QAAS,eAAgBH,GAAI,GAC/B,CAAEG,QAAS,WAAYH,GAAI,OAG/Be,QAAU,SAAApB,GACRA,EAAKK,GAAKQ,EAAKH,MAAMf,MAAMG,OAAS,EAEpCgC,QAAQC,IAAI/B,GAEZ,IAAML,EAAKqC,OAAAC,EAAA,EAAAD,CAAOnB,EAAKH,MAAMf,OAAlBuC,OAAA,CAAyBlC,IAEpCa,EAAKC,SAAS,CACZnB,aAIJC,WAAa,SAAAS,GACXyB,QAAQC,IAAI1B,GACZ,IAAMV,EAAQkB,EAAKH,MAAMf,MAAMwC,OAAO,SAAAnC,GACpC,OAAOA,EAAKK,KAAOA,IAGrBQ,EAAKC,SAAS,CACZnB,mFAIF,OACEM,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,oBAAd,oBACAL,EAAAC,EAAAC,cAACiC,EAAD,CAAOzC,MAAO6B,KAAKd,MAAMf,MAAOC,WAAY4B,KAAK5B,aACjDK,EAAAC,EAAAC,cAACkC,EAAD,CAASjB,QAASI,KAAKJ,kBAnCbQ,aCQEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASxB,SAASC,eAAe,SD2H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e634bb1c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todos = ({todos, deleteTodo}) => {\r\n  const todoList = todos.length ? (\r\n    todos.map(todo => {\r\n      return (\r\n        <div onClick={() => {deleteTodo(todo.id)}} className=\"todo center collection-item\" key={ todo.id }>\r\n          <p>{ todo.content }<i className=\"fas fa-times secondary-content\"></i></p>\r\n        </div>\r\n      )\r\n    })\r\n  ) : <p className=\"center\">No more tasks! Yay!</p>;\r\n\r\n  return (\r\n    <div className=\"todo-list collection\">\r\n      { todoList }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Todos;","import React , { Component } from 'react';\r\n\r\nclass AddTodo extends Component {\r\n  state = {\r\n    content: null\r\n  }\r\n\r\n  updateTodo = (e) => {\r\n    this.setState({\r\n      content: e.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state);\r\n\r\n    this.setState({\r\n      content: null\r\n    });\r\n\r\n    document.getElementById('task').value = '';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"add-todo\">\r\n        <form onSubmit={ this.handleSubmit }>\r\n          <label htmlFor=\"task\">Add task</label>\r\n          <input onChange={ this.updateTodo } type=\"text\" id=\"task\"/>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddTodo;","import React, { Component } from 'react';\nimport Todos from './Todos';\nimport AddTodo from './AddTodo';\n\nclass App extends Component {\n  state = {\n    todos: [\n      { content: 'Walk the dog', id: 1 },\n      { content: 'Wash the car', id: 2 },\n      { content: 'Buy milk', id: 3 }\n    ]\n  }\n  addTodo = todo => {\n    todo.id = this.state.todos.length + 1;\n\n    console.log(todo);\n\n    const todos = [...this.state.todos, todo];\n\n    this.setState({\n      todos\n    })\n  }\n\n  deleteTodo = id => {\n    console.log(id);\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id;\n    });\n\n    this.setState({\n      todos\n    });\n  }\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1 className=\"center blue-text\">Todo app ReactJS</h1>\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n        <AddTodo addTodo={this.addTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}